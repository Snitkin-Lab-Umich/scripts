plot(SNV_thresh,
sapply(pairs_time_shared_per_bldg_collapsed, function(mat){sum(colSums(mat) > 0) / ncol(mat)}),
main = 'proportion of pairs that share location and time',
ylab = 'proportion of pairs')
abline(v = seq(270, 320, 10))
ggplot(data.frame(SNV_bin = SNV_thresh,
share_location = 100*sapply(pairs_time_shared_per_bldg_collapsed, function(mat){sum(colSums(mat) > 0) / ncol(mat)})),
aes(x = SNV_bin, y = share_location)) +
geom_point() +
theme_bw() +
geom_smooth() +
xlim(0,400) +
ylim(0,60)+
ylab('Percent Pairs Overlap in Building') +
xlab('Pairs in SNV Bin') +
theme(axis.text.x=element_text(size = 18),
axis.title.x=element_text(size = 20),
axis.text.y=element_text(size = 18),
axis.title.y=element_text(size = 20))
# number of pairs per SNV bin
plot(SNV_thresh, sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)}),
main = 'Number of pairs per SNV bin',
ylab = 'Num pairs')
# ENRICHED IN PARTICULAR BUILDING?
# where are pairs sharing location?
x = sapply(pairs_time_shared_per_bldg_collapsed, function(mat){100* (rowSums(mat > 0)) / sum(rowSums(mat > 0)) })
colnames(x) = SNV_thresh
x[is.na(x)] = 0
# where are pairs sharing location? denominator = number of pairs
# percent of pairs that spend time in building X
y = sapply(pairs_time_shared_per_bldg_collapsed, function(mat){100* (rowSums(mat > 0)) / ncol(mat) })
colnames(y) = SNV_thresh
y[is.na(y)] = 0
pheatmap(x[rowSums(x) >0,], cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(y[rowSums(y) >1,1:10], cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(y[rowSums(y) >1,], cluster_rows = FALSE, cluster_cols = FALSE)
pairs_shared_per_building = matrix(0, ncol = length(SNV_thresh), nrow = nrow(pairs_time_shared_per_bldg_collapsed[[1]]))
row.names(pairs_shared_per_building) = row.names(pairs_time_shared_per_bldg_collapsed[[1]])
colnames(pairs_shared_per_building) = SNV_thresh
num_pairs = rep(0, length(pairs_time_shared_per_bldg_collapsed))
names(num_pairs) = SNV_thresh
# compare SNV <10 and SNV>=10
for (i in 1:length(pairs_time_shared_per_bldg_collapsed)){
mat = pairs_time_shared_per_bldg_collapsed[[i]]
pairs_shared_per_building[,i] = rowSums(mat > 0)
num_pairs[i] = ncol(mat)
}
z = cbind(100*pairs_shared_per_building[,1]/num_pairs[1],
100*rowSums(pairs_shared_per_building[,2:ncol(pairs_shared_per_building)])/sum(num_pairs[2:length(num_pairs)]))
pheatmap(z[rowSums(z) >1,], cluster_rows = FALSE, cluster_cols = FALSE)
barplot(t(z[rowSums(z) >1,]),
beside = TRUE,
ylab = 'Percent pairs overlap in building',
col = c('gold', 'grey'))
legend('topright', legend = c('SNV<10', 'SNV>=10'), fill = c('gold', 'grey'))
w = z[,1]/z[,2]
barplot(w[row.names(z[rowSums(z) >1,])], main = 'Ratio of proportion of pairs shared building \nin <10 & >=10')
# TIME SPENT IN BUILDING
less_than_10 = c(colSums(pairs_time_shared_per_bldg_collapsed[[1]]))
greater_than_10 = sapply(2:length(pairs_time_shared_per_bldg_collapsed), function(i){
colSums(pairs_time_shared_per_bldg_collapsed[[i]])
}) %>% unlist()
boxplot(less_than_10, greater_than_10, names = c('SNV <10', 'SNV >= 10'),
main = 'Days shared in same building between pairs', ylab = 'Days')
boxplot(less_than_10[less_than_10 >0], greater_than_10[greater_than_10 >0], names = c('SNV <10', 'SNV >= 10'),
main = 'Days shared in same building between pairs \nfor pairs that share location&time',
ylab = 'Days')
hist(greater_than_10, col = rgb(1,0,0,0.5))
hist(less_than_10, col = rgb(0,0,1,0.5), add = TRUE)
# Number of pairs that share no location
barplot(c(sum(less_than_10 == 0)/length(less_than_10),
sum(greater_than_10 == 0)/length(greater_than_10)),
names.arg = c('SNV < 10', 'SNV >=10'),
ylab = 'Proportion of pairs',
main = 'Proportion of pairs that do not share location and time')
# Number of pairs that share location
barplot(c(sum(less_than_10 != 0)/length(less_than_10),
sum(greater_than_10 != 0)/length(greater_than_10)),
names.arg = c('SNV < 10', 'SNV >=10'),
ylab = 'Proportion of pairs',
main = 'Proportion of pairs that share location and time')
# Particular pairs?
pair_types = c('30day-30day', '30day-infection', '30day-intake', 'infection-infection', 'infection-intake')
pair_types_per_SNV_bin = matrix(0,nrow = length(pairs_time_shared_per_bldg_collapsed), ncol = length(pair_types))
colnames(pair_types_per_SNV_bin) = pair_types
rownames(pair_types_per_SNV_bin) = SNV_thresh
count = 0
for (mat in pairs_time_shared_per_bldg_collapsed){
count = count + 1
pair_type_counts = sapply(colnames(mat), function(pair){
p1 = unlist(strsplit(pair, '-'))[1]
p2 = unlist(strsplit(pair, '-'))[2]
paste(sort(c(intake_acq_or_infection[p1], intake_acq_or_infection[p2])), collapse = '-')
}) %>% table()
pair_types_per_SNV_bin[count,names(pair_type_counts)] <- pair_type_counts/sum(pair_type_counts)
}
par(mar=c(10, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(t(pair_types_per_SNV_bin),
col = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'),
main = 'Pair Types per SNV bin',
ylab = 'Proportion of Total Pairs')
legend("topright", inset=c(-0.4,0), legend=colnames(pair_types_per_SNV_bin), title="Pair Types", fill = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'))
# MOVING AROUND:
num_buildings_per_stay = apply(loc_time_person, 3, function(mat){
sum(rowSums(mat[row.names(mat)!= 'Intake',])>0)
})
hist(num_buildings_per_stay[num_buildings_per_stay>0],
main = 'Number of buildings during 1 stay \n (for those who entered once)',
xlab = 'Number of buildings per stay', border = FALSE, col = 'grey')
barplot(table(num_buildings_per_stay[num_buildings_per_stay>0]),
main = 'Number of buildings during 1 stay \n (for those who entered once)',
xlab = 'Number of buildings per stay', border = FALSE, col = 'grey', ylab = 'Frequency')
# LENGTH OF STAY
length_of_stay = apply(loc_time_person, 3, function(mat){
sum(colSums(mat)>0)
})
hist(length_of_stay, main = 'Distribution of length of stay',
xlab = 'Length of stay (days)', border = FALSE, col = 'grey')
# TIME IN BUILDING
q = apply(loc_time_person, 3, function(mat){
apply(mat, 1, function(row){
continuous_stay = rle(as.numeric(row))
continuous_stay$lengths[continuous_stay$values == 1]
})
})
#### PLOT AS INDIVIDUALS ####
num_isolates_involved_in_pair = id_of_max_indv = percent_indv_that_share_building =max_times_indv_in_pair= rep(0,length(pairs_time_shared_per_bldg_collapsed))
number_of_linkages_per_indv = vector('list', length(pairs_time_shared_per_bldg_collapsed))
for (i in 1:length(pairs_time_shared_per_bldg_collapsed)){
mat = pairs_time_shared_per_bldg_collapsed[[i]]
mat2 = mat[,rep(1:ncol(mat), 2)] #undo pairs
colnames_mat2 = sapply(colnames(mat), function(name){
c(unlist(str_split(name, '-'))[1], unlist(str_split(name, '-'))[2])
}) %>% as.vector() #get names of individuals involved in pairs
colnames(mat2) = colnames_mat2
number_of_linkages_per_indv[[i]] = table(colnames_mat2)
max_times_indv_in_pair[i] = max(table(colnames(mat2)))
id_of_max_indv[i] = names(which.max(table(colnames(mat2))))
indv_share_building = sapply(unique(colnames_mat2), function(n){
rowSums(as.matrix(mat2[,colnames(mat2)==n, drop = FALSE]))
})
percent_indv_that_share_building[i] = sum(colSums(indv_share_building) >0)/ncol(indv_share_building)
num_isolates_involved_in_pair[i] = ncol(indv_share_building)
}
pdf(paste0('../figures/', Sys.Date(), '_percent_indv_that_share_building.pdf'), width = 10)
# MAIN PLOT - PERCENT INDV INVOLVED IN A PAIR THAT SHARE BUILDING
plot(SNV_thresh, percent_indv_that_share_building,
main = 'Percent of indv involved in a pair that share building \nwith anyone else involved in a pair (within that SNV bin)',
ylab = 'Proportion of individuals')
# NUMBER OF LINKAGES PER INDV
boxplot(sapply(number_of_linkages_per_indv, as.vector),
names = SNV_thresh,
main = 'Distribution of Number of linkages Per Individual Per SNV bin',
ylab = 'Number of Linkages per Indv',
xlab = 'SNV bin')
plot(SNV_thresh, sapply(number_of_linkages_per_indv, mean), main = 'Mean # Linkages Per Indv')
plot(SNV_thresh, sapply(number_of_linkages_per_indv, median), main = 'Median # Linkages Per Indv')
plot(SNV_thresh, sapply(number_of_linkages_per_indv, max), main  = 'Max # Linkages Per Indv')
# NORMALIZE BY NUMBER OF LINKAGES PER INDV
plot(SNV_thresh,
percent_indv_that_share_building/sapply(number_of_linkages_per_indv, mean),
main = 'Percent of indv involved in a pair that share building \nwith anyone else involved in a pair (within that SNV bin) \n Normalized by mean # linkages per indv')
plot(SNV_thresh,
percent_indv_that_share_building/sapply(number_of_linkages_per_indv, median),
main = 'Percent of indv involved in a pair that share building \nwith anyone else involved in a pair (within that SNV bin) \n Normalized by median # linkages per indv')
plot(SNV_thresh,
percent_indv_that_share_building/sapply(number_of_linkages_per_indv, max),
main = 'Percent of indv involved in a pair that share building \nwith anyone else involved in a pair (within that SNV bin) \n Normalized by max
# linkages per indv')
plot(SNV_thresh, num_isolates_involved_in_pair,
main = 'Number of individuals involved in a pair',
ylab = 'Unique individuals involved in a pair')
plot(SNV_thresh, max_times_indv_in_pair/num_pairs,
main = 'Max Time an Indv is Involved in a Pair/Num of Pairs')
plot(SNV_thresh, num_isolates_involved_in_pair/num_pairs,
main = 'Number of individuals involved in a pair divided by number of pairs',
ylab = 'Different invovled in a pair')
dev.off()
View(cbind(SNV_bin = SNV_thresh, max_time_indv_involved_in_pair = max_times_indv_in_pair, num_indv = num_isolates_involved_in_pair, num_pairs = num_pairs, ID_of_dominant_indv = id_of_max_indv))
rowSums(loc_time_person[,,as.character(lookup$studyid[lookup$Number == 230])])
rowSums(loc_time_person[,,as.character(lookup$studyid[lookup$Number == 158])])
rowSums(loc_time_person[,,as.character(lookup$studyid[lookup$Number == 382])])
# GET ALL RANDOM PAIRS & COMPARE TO SHARE BLDG FOR PAIRS SNVS < 10
rand_pairs = combn(names(intake_acq_or_infection),2)
rand_pairs_share_time_per_bldg = apply(rand_pairs, 2, function(nums){
sid1 = lookup$studyid[lookup$Number == nums[1]]
sid2 = lookup$studyid[lookup$Number == nums[2]]
sapply(row.names(loc_time_person), function(bldg){
sum(loc_time_person[bldg,,as.character(sid1)] == 1 & loc_time_person[bldg,,as.character(sid2)] == 1)
})
})
shared_bldg_btw_pairs = data.frame(building = row.names(loc_time_person), less_than_10 = 100*pairs_shared_per_building[,1]/num_pairs[1],
all_random_pairs = 100*rowSums(rand_pairs_share_time_per_bldg > 0) / ncol(rand_pairs_share_time_per_bldg))
shared_bldg_btw_pairs = shared_bldg_btw_pairs[rowSums(shared_bldg_btw_pairs[,2:3])>0.3,]
shared_bldg_btw_pairs_df <- gather(shared_bldg_btw_pairs, category, percent_pairs_share_bldg, less_than_10:all_random_pairs) #Create long format
ggplot(shared_bldg_btw_pairs_df, aes(building, percent_pairs_share_bldg, fill=category)) +
geom_bar(stat = "identity", position = 'dodge') +
theme_bw() +
ylab('Percent of pairs \nthat share overlap in building') +
xlab('Building') +
scale_fill_manual(name = "Category", labels = c("All Random Pairs", "Pairs Within 10 SNVs"), values = c('grey', 'lightslateblue')) +
theme(axis.text.x=element_text(size = 18),
axis.title.x=element_text(size = 20),
axis.text.y=element_text(size = 18),
axis.title.y=element_text(size = 20),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
# SHARE BLDG FOR EACH BLDG
pdf(paste0('../figures/', Sys.Date(), '_percent_pairs_share_bldg_vs_random.pdf'), width = 12)
shared_bldg_all = sapply(1:ncol(pairs_shared_per_building),function(i){pairs_shared_per_building[,i]/num_pairs[i]})
shared_bldg_all = shared_bldg_all[rowSums(shared_bldg_all) > 0.03,]
sapply(row.names(shared_bldg_all), function(bldg_name){
barplot(c(100*shared_bldg_all[bldg_name,], (100*rowSums(rand_pairs_share_time_per_bldg > 0) / ncol(rand_pairs_share_time_per_bldg))[bldg_name]),
main = bldg_name, names.arg = c(SNV_thresh, 'rand'),
xlab = 'SNV bin', ylab = 'Percent of pairs \nthat share overlap in building')
})
dev.off()
# RANDOM PAIRS VS SNVS < 10 TIME SHARED IN BUILDING
boxplot(colSums(pairs_time_shared_per_bldg_collapsed[[1]]),
colSums(rand_pairs_share_time_per_bldg),
names = c('Pairs Within 10 SNVs', 'All Random Pairs'),
ylab = 'Days Overlapped in Building')
wilcox.test(colSums(pairs_time_shared_per_bldg_collapsed[[1]]),
colSums(rand_pairs_share_time_per_bldg), alternative = 'greater')
summary(colSums(pairs_time_shared_per_bldg_collapsed[[1]]))
summary(colSums(rand_pairs_share_time_per_bldg))
lt_10_time_shared = colSums(pairs_time_shared_per_bldg_collapsed[[1]])
random_time_shared = colSums(rand_pairs_share_time_per_bldg)
time_shared_df = data.frame(time_shared = c(lt_10_time_shared, random_time_shared),
labels = c(rep('lt_10_time_shared', length(lt_10_time_shared)),
rep('random_time_shared', length(random_time_shared)))
)
data_summary <- function(x) {
m <- mean(x)
xmin <- min(x)
xmax <- max(x)
return(c(y=m,ymin=xmin,ymax=xmax))
}
ggplot(time_shared_df, aes(x = labels, y = time_shared)) +
geom_violin(aes(fill = labels)) +
theme_bw() +
xlab('') + stat_summary(fun.data=data_summary)+
ylab('Days Overlapped in Building')+
scale_fill_manual(name = "Category",
labels = c("Pairs Within 10 SNVs", "All Random Pairs"),
values = c('lightslateblue', 'grey')) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y=element_text(size = 18),
axis.title.y=element_text(size = 20),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
#log2 plot
time_shared_df_log = time_shared_df
time_shared_df_log$time_shared = log10(time_shared_df_log$time_shared+1)
ggplot(time_shared_df_log, aes(x = labels, y = time_shared)) +
geom_violin(aes(fill = labels)) +
theme_bw() +
xlab('') + stat_summary(fun.data=data_summary)+
ylab('Log10 \nDays Overlapped in Building')+
scale_fill_manual(name = "Category",
labels = c("Pairs Within 10 SNVs", "All Random Pairs"),
values = c('lightslateblue', 'grey')) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y=element_text(size = 18),
axis.title.y=element_text(size = 20),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplot(time_shared_df, aes(x = labels, y = time_shared)) +
geom_boxplot(aes(fill = labels)) +
theme_bw() +
xlab('') +
ylab('Days Overlapped in Building')+
scale_fill_manual(name = "Category",
labels = c("All Random Pairs", "Pairs Within 10 SNVs"),
values = c('lightslateblue', 'grey'))
### LENGTH OF STAY UP TO TIME OF INFECTION ###
inf_en = lookup$episode_useful[lookup$Number %in% names(intake_acq_or_infection[intake_acq_or_infection == 'infection'])]
time_to_culture = sapply(inf_en, function(en){
inf$Time2Culture[inf$episode_number == en]
})
hist(time_to_culture, 50,
main = 'Time in Jail Until Infection \n(for those who acquire during study period)',
xlab = 'Time (days)')
abline(v = median(time_to_culture), col = 'red')
summary(time_to_culture)
hist(inf$Time2Culture, 50,
main = 'Time in Jail Until Infection \n(all sequenced infections)',
xlab = 'Time (days)')
abline(v = median(inf$Time2Culture), col = 'red')
summary(inf$Time2Culture)
# time in jail after infection - subset
time_in_jail_after_infection = as.numeric(ymd(convertToDate(inf$DISCH_DT_TM[inf$episode_number %in% inf_en])) - ymd(inf$collectdate[inf$episode_number %in% inf_en]))
hist(time_in_jail_after_infection[!is.na(time_in_jail_after_infection)])
# there are some cases of infection after discharge -- why
ymd(convertToDate(inf$DISCH_DT_TM)) - ymd(inf$collectdate)
sum(is.na(time_in_jail_after_infection))
time_in_jail_after_infection[is.na(time_in_jail_after_infection)] = 1000
hist(time_in_jail_after_infection, 50,
main = 'Time in jail after infection (subset) \n 1000 days indicates no discharge date',
xlab = 'Time (days) post infection')
summary(time_in_jail_after_infection)
# cumulative distribution
cum_inf_per_days_stayed = rep(0, length(0:max(time_to_culture)))
for (i in 0:max(time_to_culture)){
cum_inf_per_days_stayed[i+1] = sum(time_to_culture <= i)
}
plot(0:max(time_to_culture), cum_inf_per_days_stayed)
plot(0:max(time_to_culture),
cum_inf_per_days_stayed/length(time_to_culture),
type = 'l',
xlab = 'Days in jail',
ylab = 'Proportion of total infection cases')
# "survival" curve
plot(0:max(time_to_culture),
1 - (cum_inf_per_days_stayed/length(time_to_culture)),
type = 'line',
ylab = 'proportion susceptible / num ppl eventually infected',
xlab = 'Time in jail')
# only look at year 2 -- constant number of infections
time_to_culture_year2 = sapply(inf_en, function(en){
if(ymd(inf$collectdate)[inf$episode_number == en] >= '2017-01-01'){
#print(ymd(inf$collectdate)[inf$episode_number == en])
inf$Time2Culture[inf$episode_number == en ]
}else{
NA
}
})
time_to_culture_year2 = time_to_culture_year2[!is.na(time_to_culture_year2)]
# cumulative distribution
cum_inf_per_days_stayed_yr2 = rep(0, length(0:max(time_to_culture_year2)))
for (i in 0:max(time_to_culture_year2)){
cum_inf_per_days_stayed_yr2[i+1] = sum(time_to_culture_year2 <= i)
}
plot(0:max(time_to_culture_year2),
cum_inf_per_days_stayed_yr2/length(time_to_culture_year2),
type = 'l',
xlab = 'Days in jail',
ylab = 'Proportion of total infection cases',
main = 'Infections that Occur in Year 2 of Study')
lines(0:max(time_to_culture),
cum_inf_per_days_stayed/length(time_to_culture),
col = 'red')
plot(0:max(time_to_culture_year2),
1 - (cum_inf_per_days_stayed_yr2/length(time_to_culture_year2)),
type = 'l',
xlab = 'Days in jail',
ylab = 'proportion susceptible / num ppl eventually infected',
main = 'Infections that Occur in Year 2 of Study: "Survival"')
par(mar=c(10, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(t(pair_types_per_SNV_bin),
col = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'),
main = 'Pair Types per SNV bin',
ylab = 'Proportion of Total Pairs')
barplot(t(pair_types_per_SNV_bin),
col = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'),
main = 'Pair Types per SNV bin',
ylab = 'Proportion of Total Pairs')
par(mar=c(10, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(t(pair_types_per_SNV_bin),
col = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'),
main = 'Pair Types per SNV bin',
ylab = 'Proportion of Total Pairs')
legend("topright", inset=c(-0.4,0), legend=colnames(pair_types_per_SNV_bin), title="Pair Types", fill = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'))
legend("topright", inset=c(-0.3,0), legend=colnames(pair_types_per_SNV_bin), title="Pair Types", fill = brewer.pal(n = ncol(pair_types_per_SNV_bin), name = 'Set2'))
pairs_time_shared_per_bldg_collapsed
sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)})
plot(SNV_thresh,sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)}))
plot(SNV_thresh,sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)}), ylab = 'Number of pairs')
plot(SNV_thresh,sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)}), ylab = 'Number of pairs', )
sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)})
sapply(pairs_time_shared_per_bldg_collapsed, function(mat){ncol(mat)})[1:10]
1500+40-8000
5000/8000
setwd('~/Desktop/gl_mount/Project_MRSA/Analysis/2016-MRSA_jail_project/2019-01-31_MLST/')
setwd('~/Desktop/gl_mount/Project_MRSA/Analysis/2016-MRSA_jail_project/')
mlst = read.table('2019-03-26_combine_MLST_analysis/data/mlst_jail_combined_final')
View(mlst)
library(readxl)
lookup = read_excel('../2019-MRSA_jail_male_30_day/data/MRSA_jail_R01_sample_lookup_v5.xlsx')
lookup$Number[lookup$infection_or_colonization == 'infection']
inf_num = lookup$Number[lookup$infection_or_colonization == 'infection']
row.names(mlst)
sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
})
library(magrittr)
sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
}) %>% unlist()
sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
}) %>% unlist() %>% table()
row.names(mlst)
row.names(mlst) %in% lookup$Number
sum(row.names(mlst) %in% lookup$Number)
View(mlst)
sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
})
inf_num
inf_num %in% row.names(mlst)
inf_num[!inf_num %in% row.names(mlst)]
View(mlst)
View(lookup)
lookup = read_excel('../2019-MRSA_jail_male_30_day/data/2019-05-08_MRSA_jail_master_lookup_table.xlsx')
inf_num = lookup$Number[lookup$infection_or_colonization == 'infection']
inf_num[!inf_num %in% row.names(mlst)]
sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
})
inf_num[!inf_num %in% row.names(mlst)]
View(mlst)
View(lookup)
mlst_inf = sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
}) %>% unlist() %>% table()
mlst_inf
mlst_inf = sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
}) %>% unlist()
mlst_inf
mlst_inf = sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
})
mlst_inf
mlst_inf == 5
mlst_inf == '5'
grep('5', mlst_inf)
mlst_inf
as.character(mlst_inf)
as.numeric(mlst_inf)
as.character(as.numeric(mlst_inf))
mlst = read.table('2019-03-26_combine_MLST_analysis/data/mlst_jail_combined_final', stringsAsFactors = FALSE)
mlst_inf = sapply(inf_num, function(num){
mlst$ST[row.names(mlst) == num]
})
mlst_inf
as.character(as.numeric(mlst_inf))
mlst_inf = as.character(as.numeric(mlst_inf))
mlst_inf == '5'
mlst_inf %in% c('5', '5*')
inf_num[mlst_inf %in% c('5', '5*')]
sapply(inf_num[mlst_inf %in% c('5', '5*')], function(num){
sapply(inf_num[mlst_inf %in% c('5', '5*')], function(num){
lookup$studyid[lookup$Number == num]
})
sapply(inf_num[mlst_inf %in% c('5', '5*')], function(num){
lookup$studyid[lookup$Number == num]
}) %>% table()
inf_num[mlst_inf %in% c('5', '5*')]
sapply(inf_num[mlst_inf %in% c('5', '5*')], function(num){lookup$episode[lookup$Number == num]})
View(lookup)
metadata = read_excel('~/Downloads/Susceptibility_Pattern_WithRulePrediction_9.10.19.xlsx')
View(metadata)
metadata$episode_IDNum
metadata$episode_IDNum[grep('KP', metadata$episode_IDNum)]
sapply(metadata$episode_IDNum[grep('KP', metadata$episode_IDNum)], function(en){lookup$sex[lookup$episode_useful == en]})
sapply(metadata$episode_IDNum[grep('KP', metadata$episode_IDNum)], function(en){lookup$sex[lookup$episode_useful == en]}) %>% table()
sapply(metadata$episode_IDNum[grep('KP', metadata$episode_IDNum)], function(en){lookup$infection_Site[lookup$episode_useful == en]})
sapply(metadata$episode_IDNum[grep('KP', metadata$episode_IDNum)], function(en){lookup$infection_Site[lookup$episode_useful == en]}) %>% table()
R.version
setwd('/nfs/esnitkin/Project_MRSA/Analysis/2016-MRSA_jail_project/2020-01-16_snpmat_to_RData/lib')
source('~/Desktop/gl_mount/Github/snitkitr/R/parse_snps.R')
source('~/Desktop/gl_mount/Github/snitkitr/R/parse_snps.R')
getwd()
source('~/Desktop/gl_mount/Github/snitkitr/R/parse_snps.R')
source('~/Desktop/gl_mount/Github/snitkitr/R/parse_snps.R')
setwd('~/projects/scripts/')
params$mat = 'test.RData'
params = list(mat = 'test.RData')
params$mat
params = list(mat = 'test')
params$mat
# Read in and parse variant matrix
if(grepl('.RData',params$mat)){
load(params$mat)
alt_mat = parsed
}else{
error=function(e){print(paste("Requires .RData of parsed as input"))}
}
# Read in and parse variant matrix
if(grepl('.RData',params$mat)){
load(params$mat)
alt_mat = parsed
}else{
error=function(e){print(paste("Requires .RData of parsed as input"))}
return(error)
}
# Read in and parse variant matrix
if(grepl('.RData',params$mat)){
load(params$mat)
alt_mat = parsed
}else{
function(e){print(paste("Requires .RData of parsed as input"))}
}
# Read in and parse variant matrix
if(grepl('.RData',params$mat)){
load(params$mat)
alt_mat = parsed
}else{
error(paste("Requires .RData of parsed as input"))
}
# Read in and parse variant matrix
if(grepl('.RData',params$mat)){
load(params$mat)
alt_mat = parsed
}else{
stop("Requires .RData of parsed as input")
}
load('~/Desktop/gl_mount/Project_MRSA/Analysis/2016-MRSA_jail_project/2020-01-16_run_parser/data/parsed.RData')
